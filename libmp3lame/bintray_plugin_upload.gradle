apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'com.android.library'

group = APPLICATION_ID
version = RELEASE_VERSION
def artifactId = ARTIFACT_ID

bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    user = properties.get("BINTRAY_USER")
    key = properties.get("BINTRAY_KEY")
    configurations = ['archives']
    publications = ['MyPublication']

    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = false //[Default: false] Whether version should be auto published after an upload
    override = true //[Default: false] Whether to override version artifacts already published

    pkg {
        repo = 'maven'
        name = artifactId
        desc = 'Simply implement the lame library on android'
        websiteUrl = 'https://github.com/zy3274311/SampleLameForAndroid'
        issueTrackerUrl = 'https://github.com/zy3274311/SampleLameForAndroid/issues'
        vcsUrl = 'https://github.com/zy3274311/bintray-release.git'
        licenses = ['Apache-2.0']
        labels = ['aar', 'android', 'mp3']
        publicDownloadNumbers = true

    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            // Define this explicitly if using implementation or api configurations
            pom.withXml {
                def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}